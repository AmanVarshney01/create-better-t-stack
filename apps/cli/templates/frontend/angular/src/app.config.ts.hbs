import {
	type ApplicationConfig,
	provideZoneChangeDetection,
} from "@angular/core";
import { provideAnimations } from "@angular/platform-browser/animations";
import { provideRouter } from "@angular/router";
import { routes } from "./app.routes";
import { provideHttpClient, withInterceptors } from "@angular/common/http";
import type { HttpHandlerFn, HttpInterceptorFn, HttpRequest } from "@angular/common/http";
{{#if (not (eq api "none"))}}
import { queryClient } from "src/services/rpc.service";
import {
	QueryClient,
	provideTanStackQuery,
	withDevtools,
} from "@tanstack/angular-query-experimental";
{{/if}}
{{#if (eq addons "pwa")}}
import { provideServiceWorker } from '@angular/service-worker';
import { isDevMode } from '@angular/core';
{{/if}}


const withCredentialsInterceptor: HttpInterceptorFn = (
	req: HttpRequest<unknown>,
	next: HttpHandlerFn,
) => {
	const modifiedReq = req.clone({
		withCredentials: true,
	});
	return next(modifiedReq);
};
export const appConfig: ApplicationConfig = {
	providers: [
		provideZoneChangeDetection({ eventCoalescing: true }),
		provideRouter(routes),
		provideAnimations(),
		provideHttpClient(withInterceptors([withCredentialsInterceptor])),
		{{#if (not (eq api "none"))}}
  provideTanStackQuery(
			queryClient,
			withDevtools(() => ({ loadDevtools: "auto" })),
		),
		{{/if}}
		{{#if (eq addons "pwa")}}
    provideServiceWorker('ngsw-worker.js', {
      enabled: !isDevMode(),
      registrationStrategy: 'registerWhenStable:30000',
    }),
		{{/if}}
	],
};
