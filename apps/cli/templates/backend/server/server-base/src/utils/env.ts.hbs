{{#if (eq runtime "workers")}}
import { z } from "zod";
{{else}}
import { z } from "zod";
import "dotenv/config";
{{/if}}

const EnvSchema = z.object({
	NODE_ENV: z.string().default("development"),
	{{#if (not (eq database "none"))}}
	DATABASE_URL: z.string().min(1),
	{{/if}}
	CORS_ORIGIN: z.string().optional(),
	PORT: z.coerce.number().default(3000),
	{{#if auth}}
	BETTER_AUTH_SECRET: z.string(),
	BETTER_AUTH_URL: z.string().url(),
	{{/if}}
	{{#if (includes examples "ai")}}
	GOOGLE_GENERATIVE_AI_API_KEY: z.string(),
	{{/if}}
});

export type Env = z.infer<typeof EnvSchema>;

function getEnvironmentVariables(): Record<string, string | undefined> {
	{{#if (eq runtime "workers")}}
	const { env } = require("cloudflare:workers");
	return env;
	{{else}}
	return process.env;
	{{/if}}
}

function validateEnvironment(): Env {
	const rawEnv = getEnvironmentVariables();

	try {
		return EnvSchema.parse(rawEnv);
	} catch (error) {
		console.error("‚ùå Invalid env:");
		if (error instanceof z.ZodError) {
			console.error(JSON.stringify(error.flatten().fieldErrors, null, 2));
		}
		process.exit(1);
	}
}

const env = validateEnvironment();
export default env;
