{{#if (eq backend 'next')}}
import type { NextRequest } from "next/server";
{{#if auth}}
import { auth } from "./auth";
{{/if}}

export async function createContext(req: NextRequest) {
{{#if auth}}
const session = await auth.api.getSession({
headers: req.headers,
});
return {
session,
};
{{else}}
return {}
{{/if}}
}

{{else if (eq backend 'hono')}}
import type { Context as HonoContext } from "hono";
{{#if auth}}
import { auth } from "./auth";
{{/if}}

export type CreateContextOptions = {
context: HonoContext;
};

export async function createContext({ context }: CreateContextOptions) {
{{#if auth}}
const session = await auth.api.getSession({
headers: context.req.raw.headers,
});
return {
session,
};
{{else}}
// No auth configured
return {
session: null,
};
{{/if}}
}

{{else if (eq backend 'elysia')}}
import type { Context as ElysiaContext } from "elysia";
{{#if auth}}
import { auth } from "./auth";
{{/if}}

export type CreateContextOptions = {
context: ElysiaContext;
};

export async function createContext({ context }: CreateContextOptions) {
{{#if auth}}
const session = await auth.api.getSession({
headers: context.request.headers,
});
return {
session,
};
{{else}}
// No auth configured
return {
session: null,
};
{{/if}}
}

{{else if (eq backend 'express')}}
{{#if auth}}
import { fromNodeHeaders } from "better-auth/node";
import { auth } from "./auth";
{{/if}}

export async function createContext(opts: any) {
{{#if auth}}
const session = await auth.api.getSession({
headers: fromNodeHeaders(opts.req.headers),
});
return {
session,
};
{{else}}
// No auth configured
return {
session: null,
};
{{/if}}
}

{{else if (eq backend 'fastify')}}
{{#if auth}}
import { fromNodeHeaders } from "better-auth/node";
import type { FastifyRequest } from "fastify";
{{/if}}

export async function createContext(request: FastifyRequest) {
{{#if auth}}
const session = await request.server.auth.api.getSession({
headers: fromNodeHeaders(request.headers),
});
return {
session,
ctx: request.server,
};
{{else}}
// No auth configured
return {
session: null,
ctx: request.server,
};
{{/if}}
}

{{else}}
// Default or fallback context if backend is not recognized or none
// This might need adjustment based on your default behavior
export async function createContext() {
return {
session: null,
};
}
{{/if}}

export type Context = Awaited<ReturnType<typeof createContext>>;
