import { CommonModule } from '@angular/common';
import { Component, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { injectForm, injectStore, TanStackField } from '@tanstack/angular-form';
import { injectMutation, injectQuery, QueryClient } from '@tanstack/angular-query-experimental';
import { z } from 'zod';
{{#if (eq api "trpc")}}
import { RpcService } from '../../services/rpc.service';
{{/if}}
{{#if (eq api "orpc")}}
import { RpcService } from '../../services/rpc.service';
{{/if}}
@Component({
 selector: 'app-todo-list',
 standalone: true,
 imports: [CommonModule, FormsModule, TanStackField],
 templateUrl: './todo-list.component.html'
})
export class TodoListComponent {
  queryClient = inject(QueryClient);
 {{#if (eq api "trpc")}}
 private _rpc = inject(RpcService);
 queryToDo = injectQuery(() => ({
  queryKey: ["todo"],
  queryFn: () => this._rpc.proxy.todo.getAll.query(),
 }));

 mutateToDo = injectMutation(() => ({
  mutationFn: (todo: string) => {
   return this._rpc.proxy.todo.create.mutate({ text: todo });
  },
  onSuccess: () => {
   this.queryClient.invalidateQueries({ queryKey: ["todo"] });
   this.todoForm.reset();
  },
 }));

 updateToDo = injectMutation(() => ({
  mutationFn: (todo: Awaited<ReturnType<typeof this._rpc.proxy.todo.getAll.query>>[number]) => {
   console.log(todo, "todoForm");
   return this._rpc.proxy.todo.toggle.mutate({
    id: todo.id!,
    completed: !todo.completed,
   });
  },
  onSuccess: () => {
   this.queryClient.invalidateQueries({ queryKey: ["todo"] });
   this.todoForm.reset();
  },
 }));

 deleteTodo = injectMutation(() => ({
  mutationFn: (id: string) => {
   return this._rpc.proxy.todo.delete.mutate({ id: id });
  },
  onSuccess: () => {
   this.queryClient.invalidateQueries({ queryKey: ["todo"] });
  },
 }));

 {{/if}}
 {{#if (eq api "orpc")}}
  private _rpc = inject(RpcService);

  queryToDo = injectQuery(() => this._rpc.utils.todo.getAll.queryOptions())

  mutateToDo = injectMutation(() => this._rpc.utils.todo.create.mutationOptions({
   onSuccess: () => {
    this.queryClient.invalidateQueries({ queryKey: this._rpc.utils.todo.getAll.key() });
    this.todoForm.reset();
   },
  }));

  updateToDo = injectMutation(() => this._rpc.utils.todo.toggle.mutationOptions({
   onSuccess: () => {
    this.queryClient.invalidateQueries({ queryKey: this._rpc.utils.todo.getAll.key() });
    this.todoForm.reset();
   },
  }));

  deleteTodo = injectMutation(() => this._rpc.utils.todo.delete.mutationOptions({
   onSuccess: () => {
    this.queryClient.invalidateQueries({ queryKey: this._rpc.utils.todo.getAll.key() });
   },
  }));
 {{/if}}

 todoSchema = z.object({
 todo: z.string().nonempty("Todo is required"),
 });

 todoForm = injectForm({
  defaultValues: {
   todo: "",
  } as z.infer<typeof this.todoSchema>,
  validators: {
   onChange: this.todoSchema,
  },
  onSubmit: async ({ value }) => {
   this.mutateToDo.mutate(value.todo);
  },
 });
 canSubmit = injectStore(this.todoForm, (state) => state.canSubmit);
 isSubmitting = injectStore(this.todoForm, (state) => state.isSubmitting);

}
